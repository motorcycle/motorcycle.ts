import { DataFlowComponent, Stream } from '@motorcycle/types'
import { DomRequests, DomResponses } from './'

import { VNode } from 'mostly-dom'
import { curry3 } from '@typed/functions'
import { join } from '@typed/list'
import { tap } from '@motorcycle/stream'

export interface Isolate {
  <TInputs extends DomResponses, TOutputs extends DomRequests>(
    f: DomDataFlowComponent<TInputs, TOutputs>,
    key: string,
    xs: TInputs
  ): TOutputs
  <TInputs extends DomResponses, TOutputs extends DomRequests>(
    f: DomDataFlowComponent<TInputs, TOutputs>,
    key: string
  ): DomDataFlowComponent<TInputs, TOutputs>
  <TInputs extends DomResponses, TOutputs extends DomRequests>(
    f: DomDataFlowComponent<TInputs, TOutputs>
  ): IsolateArity2<TInputs, TOutputs>
}

export interface IsolateArity2<TInputs extends DomResponses, TOutputs extends DomRequests> {
  (key: string, xs: TInputs): TOutputs
  (key: string): DomDataFlowComponent<TInputs, TOutputs>
}

export interface DomDataFlowComponent<TInputs extends DomResponses, TOutputs extends DomRequests>
  extends DataFlowComponent<TInputs, TOutputs> {
  (xs: TInputs): TOutputs
}

const KEY_PREFIX = `__isolation__`

/**
 * Isolates a DOM data-flow component by adding an isolation class name to 
 * the outermost DOM element emitted by the componentâ€™s `view$` stream.
 *
 * The isolation class name is generated by appending the given isolation key
 * to the prefix `__isolation__`, e.g., given `foo` as key produces
 * `__isolation__foo`.
 *
 * Isolating components are useful especially when dealing with lists of a
 * specific component, so that events can be differentiated between the siblings.
 * However, isolated components are not isolated from access by an ancestor DOM
 * element.
 *
 * Note that `isolate` is curried.
 *
 * @name isolate<TInputs extends DomResponses, TOutputs extends DomRequests>(f: DomDataFlowComponent<TInputs, TOutputs>, key: string, xs: TInputs): TOutputs
 *
 * @example
 * import { empty } from '@motorcycle/stream'
 * import { eventDelegationDomFrom } from '@motorcycle/dom'
 *
 * const xs = eventDelegationDomFrom(empty())
 * const result = isolate(MyDomDataFlowComponent, `myIsolationKey`, xs)
 */
export const isolate: Isolate = curry3(function isolate<
  TInputs extends DomResponses,
  TOutputs extends DomRequests
>(f: DomDataFlowComponent<TInputs, TOutputs>, key: string, xs: TInputs) {
  const { dom } = xs
  const isolatedDom = dom.query(`.${KEY_PREFIX}${key}`)
  // TODO: Use spread operator when PR #13288 is merged.
  // See https://github.com/Microsoft/TypeScript/pull/13288
  const os = f(Object.assign({}, xs, { dom: isolatedDom }))
  const r = Object.assign({}, os, { view$: isolateView(os.view$, key) })

  return r
})

const EMPTY_CLASS_NAME = ``
const CLASS_NAME_SEPARATOR = ` `

function isolateView(vn$: Stream<VNode>, key: string) {
  const pk = KEY_PREFIX + key

  return tap(vn => {
    const { props: { className: className = EMPTY_CLASS_NAME } } = vn
    const needsIsolation = className.indexOf(pk) === -1

    if (needsIsolation)
      vn.props.className = removeSuperfluousSpaces(join(CLASS_NAME_SEPARATOR, [className, pk]))
  }, vn$)
}

const RE_TWO_OR_MORE_SPACES = /\s{2,}/g

function removeSuperfluousSpaces(s: string): string {
  return s.replace(RE_TWO_OR_MORE_SPACES, CLASS_NAME_SEPARATOR)
}
