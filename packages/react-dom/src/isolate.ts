import { Component, Stream } from '@motorcycle/types'
import { DomSinks, DomSources } from './'
import { contains, join, lensPath, updateAt } from '167'

import { VNode } from './'
import { map } from '@motorcycle/stream'

const updateClassName = updateAt(lensPath(['props', 'className']))

/**
 * Isolates a component by adding an isolation class name to the outermost
 * DOM element emitted by the componentâ€™s view stream.
 *
 * The isolation class name is generated by appending the given isolation `key`
 * to the prefix `$$isolation$$-`, e.g., given `foo` as `key` produces
 * `$$isolation$$-foo`.
 *
 * Isolating components are useful especially when dealing with lists of a
 * specific component, so that events can be differentiated between the siblings.
 * However, isolated components are not isolated from access by an ancestor DOM
 * element.
 *
 * @name isolate<Sources extends { readonly dom: DomSource }, Sinks extends { readonly view$: Stream<VNode> }>(component: Component<Sources, Sinks>, key: string): Component<Sources, Sinks>
 *
 * @example
 * const MyIsolatedComponent = isolate(MyComponent, `myIsolationKey`)
 * const sinks = MyIsolatedComponent(sources)
 */
export function isolate<Sources extends DomSources, Sinks extends DomSinks>(
  component: Component<Sources, Sinks>,
  key: string
): Component<Sources, Sinks> {
  return function isolatedComponent(sources: Sources) {
    const { dom } = sources
    const isolatedDom = dom.query(`.${KEY_PREFIX}${key}`)
    const sinks = component(Object.assign({}, sources, { dom: isolatedDom }))
    const isolatedSinks = Object.assign({}, sinks, { view$: isolateView(sinks.view$, key) })

    return isolatedSinks
  }
}

const KEY_PREFIX = `__isolation__`

function isolateView(view$: Stream<VNode>, key: string) {
  const prefixedKey = KEY_PREFIX + key

  return map(
    updateClassName((className: string = EMPTY_CLASS_NAME) => {
      const needsIsolation = !contains(prefixedKey, className)

      return needsIsolation
        ? removeSuperfluousSpaces(join(CLASS_NAME_SEPARATOR, [className, prefixedKey]))
        : className
    }),
    view$
  )
}

const EMPTY_CLASS_NAME = ``
const CLASS_NAME_SEPARATOR = ` `

function removeSuperfluousSpaces(str: string): string {
  return str.replace(RE_TWO_OR_MORE_SPACES, CLASS_NAME_SEPARATOR)
}

const RE_TWO_OR_MORE_SPACES = /\s{2,}/g
